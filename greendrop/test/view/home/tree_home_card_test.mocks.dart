// Mocks generated by Mockito 5.4.6 from annotations
// in greendrop/test/view/home/tree_home_card_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i7;

import 'package:greendrop/model/level.dart' as _i5;
import 'package:greendrop/model/tree.dart' as _i2;
import 'package:greendrop/view-model/tree_provider.dart' as _i3;
import 'package:greendrop/view-model/user_provider.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTree_0 extends _i1.SmartFake implements _i2.Tree {
  _FakeTree_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TreeProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockTreeProvider extends _i1.Mock implements _i3.TreeProvider {
  MockTreeProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Tree get tree =>
      (super.noSuchMethod(
            Invocation.getter(#tree),
            returnValue: _FakeTree_0(this, Invocation.getter(#tree)),
          )
          as _i2.Tree);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i4.dummyValue<String>(this, Invocation.getter(#name)),
          )
          as String);

  @override
  String get description =>
      (super.noSuchMethod(
            Invocation.getter(#description),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#description),
            ),
          )
          as String);

  @override
  int get curLevel =>
      (super.noSuchMethod(Invocation.getter(#curLevel), returnValue: 0) as int);

  @override
  List<_i5.Level> get levels =>
      (super.noSuchMethod(
            Invocation.getter(#levels),
            returnValue: <_i5.Level>[],
          )
          as List<_i5.Level>);

  @override
  int get dropletsUsed =>
      (super.noSuchMethod(Invocation.getter(#dropletsUsed), returnValue: 0)
          as int);

  @override
  set tree(_i2.Tree? _tree) => super.noSuchMethod(
    Invocation.setter(#tree, _tree),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void waterTree(_i6.UserProvider? userProvider) => super.noSuchMethod(
    Invocation.method(#waterTree, [userProvider]),
    returnValueForMissingStub: null,
  );

  @override
  int getDropletsNeededForNextLevel() =>
      (super.noSuchMethod(
            Invocation.method(#getDropletsNeededForNextLevel, []),
            returnValue: 0,
          )
          as int);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
